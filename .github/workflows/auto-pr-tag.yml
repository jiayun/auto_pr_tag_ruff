name: Auto PR and Tag on Main Merge

# Note: This workflow requires the following GitHub settings:
# 1. Go to Settings > Actions > General
# 2. Under "Workflow permissions", select "Read and write permissions"
# 3. Check "Allow GitHub Actions to create and approve pull requests"
# 
# Alternatively, you can use a Personal Access Token (PAT):
# 1. Create a PAT with repo and workflow permissions
# 2. Add it as a secret named AUTO_PR_TOKEN
# 3. Replace GITHUB_TOKEN with AUTO_PR_TOKEN in the workflow
#
# Behavior when same branch is merged multiple times:
# - PR to develop: Creates new PR if previous one was merged/closed (allows multiple PRs)
# - Tag: Updates existing tag to point to the branch HEAD commit (not merge commit)

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  auto-pr-and-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get PR branch name
      id: branch
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "PR branch name: $BRANCH_NAME"
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Fetch all branches
      run: |
        git fetch origin
        git fetch origin ${{ steps.branch.outputs.name }}:${{ steps.branch.outputs.name }} || true
        git fetch origin develop:develop
    
    - name: Create PR from branch to develop
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if the PR branch still exists
        if git show-ref --verify --quiet refs/heads/${{ steps.branch.outputs.name }}; then
          # Check if an open PR already exists (merged/closed PRs will allow new PR creation)
          EXISTING_PR=$(gh pr list --base develop --head ${{ steps.branch.outputs.name }} --state open --json number --jq '.[0].number' || echo "")
          
          if [ -z "$EXISTING_PR" ]; then
            # Create new PR
            BRANCH_NAME="${{ steps.branch.outputs.name }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            
            PR_BODY="## Summary
        Automatically created PR to merge changes from ${BRANCH_NAME} into develop branch.
        
        This PR was created because the branch was merged into main.
        
        ## Related PR
        - Original PR: #${PR_NUMBER}
        - Title: ${PR_TITLE}
        
        ---
        *This PR was automatically generated by GitHub Actions*"
            
            echo "$PR_BODY" > pr_body.md
            
            gh pr create \
              --base develop \
              --head "$BRANCH_NAME" \
              --title "Develop: $BRANCH_NAME" \
              --body-file pr_body.md \
              --label "develop" \
              --reviewer "jiayun" || echo "Failed to create PR (branch might not have new commits for develop)"
          else
            echo "PR already exists: #$EXISTING_PR"
          fi
        else
          echo "Branch ${{ steps.branch.outputs.name }} no longer exists, skipping PR creation"
        fi
    
    - name: Create tag for the branch
      run: |
        # Create tag from the branch HEAD (not merge commit)
        BRANCH_NAME="${{ steps.branch.outputs.name }}"
        # Replace slashes with dashes for valid tag names
        TAG_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
        MERGE_COMMIT="${{ github.event.pull_request.merge_commit_sha }}"
        BRANCH_HEAD="${{ github.event.pull_request.head.sha }}"
        
        echo "Branch: $BRANCH_NAME"
        echo "Merge commit: $MERGE_COMMIT" 
        echo "Branch HEAD: $BRANCH_HEAD"
        echo "Will tag branch HEAD commit: $BRANCH_HEAD"
        
        # Check if tag already exists
        if git rev-parse "refs/tags/$TAG_NAME" >/dev/null 2>&1; then
          EXISTING_TAG_COMMIT=$(git rev-parse "refs/tags/$TAG_NAME")
          echo "Tag $TAG_NAME already exists, pointing to: $EXISTING_TAG_COMMIT"
          echo "Updating tag to point to branch HEAD: $BRANCH_HEAD"
          # Delete the existing tag locally and remotely
          git tag -d "$TAG_NAME" || true
          git push origin ":refs/tags/$TAG_NAME" || true
          # Create new tag at the branch HEAD
          git tag -a "$TAG_NAME" "$BRANCH_HEAD" -m "Updated tag for PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          git push origin "$TAG_NAME"
          echo "Updated and pushed tag: $TAG_NAME to branch HEAD: $BRANCH_HEAD"
        else
          git tag -a "$TAG_NAME" "$BRANCH_HEAD" -m "Tag for PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          git push origin "$TAG_NAME"
          echo "Created and pushed tag: $TAG_NAME at branch HEAD: $BRANCH_HEAD"
        fi